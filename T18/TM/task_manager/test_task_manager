import unittest
import tempfile
import os
from task_controller import TaskController
from task import Task

class TestTaskManager(unittest.TestCase):
    def setUp(self):
        self.test_file = tempfile.NamedTemporaryFile(delete=False)
        self.controller = TaskController(self.test_file.name)

    def tearDown(self):
        self.test_file.close()  # Ensure the file is closed before removing
        os.remove(self.test_file.name)

    def test_create_task(self):
        self.controller.create_task("Test Task", "Description", "2024-06-30", 1, "User1")
        self.assertEqual(len(self.controller.get_tasks()), 1)

    def test_delete_task(self):
        self.controller.create_task("Test Task", "Description", "2024-06-30", 1, "User1")
        self.controller.delete_task("Test Task")
        self.assertEqual(len(self.controller.get_tasks()), 0)

    def test_update_task(self):
        self.controller.create_task("Test Task", "Description", "2024-06-30", 1, "User1")
        self.controller.update_task("Test Task", new_title="Updated Task", description="New Description")
        task = self.controller.get_tasks()[0]
        self.assertEqual(task.title, "Updated Task")
        self.assertEqual(task.description, "New Description")

    def test_get_tasks(self):
        self.controller.create_task("Test Task", "Description", "2024-06-30", 1, "User1")
        tasks = self.controller.get_tasks()
        self.assertEqual(len(tasks), 1)
        self.assertEqual(tasks[0].title, "Test Task")

    def test_save_and_load_tasks(self):
        self.controller.create_task("Test Task", "Description", "2024-06-30", 1, "User1")
        self.controller.save_tasks()
        new_controller = TaskController(self.test_file.name)
        self.assertEqual(len(new_controller.get_tasks()), 1)

if __name__ == '__main__':
    unittest.main()
